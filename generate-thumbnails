#!/usr/bin/env lua5.2
local cqueues = require'cqueues'
local database = require'live-share.database'
local Process = require'live-share.Process'
local Upload = require'live-share.model.Upload'
local thumbnail = require'live-share.thumbnail'

local cq = cqueues.new()

Process:start_signal_watcher(cq)

cq:wrap(function()
    local process_set = {}
    local total_process_count = 0
    for upload in Upload:each() do
        local process = assert(thumbnail.generate(upload))
        process_set[process] = true
        total_process_count = total_process_count + 1
    end

    repeat
        local living_processes = {}
        for process in pairs(process_set) do
            table.insert(living_processes, process)
        end

        io.stdout:write('\r', string.format('%d/%d',
                                            total_process_count - #living_processes,
                                            total_process_count))
        io.stdout:flush()

        local finished_process =
            assert(cqueues.poll(table.unpack(living_processes)))

        process_set[finished_process] = nil
    until not next(process_set) -- till set is empty

    io.stdout:write('\n')
    io.stdout:flush()
end)

local result, err = cq:loop()
database.close()
if not result then
    error(err)
end
