#!/bin/sh
# Locates required system dependencies and generates a config file for later use.

set -e
set -u
cd "$(dirname "$0")"
. tools/utils.sh

find_lua()
{
    local major="$1"
    local minor="$2"
    for lua in "lua-$major.$minor" \
               "lua-$major$minor" \
               "lua$major.$minor" \
               "lua$major$minor" \
               "lua"; do
        if has_program "$lua"; then
            local found_version="$("$lua" -v | get_regex_group 'Lua ([0-9.]{3})')"
            if [ "$found_version" = "$major.$minor" ]; then
                echo "$lua"
                return 0
            fi
        fi
    done
    echoerr "Can't find Lua $major.$minor."
    exit 1
}

find_luarocks()
{
    local major="$1"
    local minor="$2"
    for luarocks in "luarocks-$major.$minor" \
                    "luarocks-$major$minor" \
                    "luarocks$major.$minor" \
                    "luarocks$major$minor" \
                    "luarocks"; do
        if has_program "$luarocks"; then
            local found_version="$("$luarocks" config --lua-ver)"
            if [ "$found_version" = "$major.$minor" ]; then
                echo "$luarocks"
                return 0
            fi
        fi
    done
    echoerr "Can't find LuaRocks for Lua $major.$minor."
    exit 1
}

find_optional_program()
{
    local name="$1"
    if has_program "$name"; then
        echo "$name"
    else
        echoerr "Can't find optional program $name."
    fi
}

# Lua:
lua="$(find_lua 5 2)"
lua_luarocks="$(find_luarocks 5 2)"
echo "Found $lua"
echo "Found $lua_luarocks"

# LuaJIT:
require_program 'luajit'
luajit='luajit'
luajit_luarocks="$(find_luarocks 5 1)"
echo "Found $luajit_luarocks"

# Argon2:
require_file /usr/include/argon2.h
require_file /usr/lib/libargon2.so

# FFmpeg:
require_program ffmpeg

# NodeJS:
require_program npm

# Optional dependencies:
luacheck="$(find_optional_program 'luacheck')"
busted="$(find_optional_program 'busted')"
ldoc="$(find_optional_program 'ldoc')"
apidoc="$(find_optional_program 'apidoc')"
checkbashisms="$(find_optional_program 'checkbashisms')"

# Lua package installation:
# Packages are either installed
# - global
# - local
# - bundled
# When installing them 'bundled' the packages are installed by running
# `luarocks --tree=... install --deps=mode=one`

cat >config.mk <<EOF
# This file was generated automatically.

LUA="$lua"
LUA_HOST="$lua"
LUA_LUAROCKS="$lua_luarocks"
LUA_TREE=""

LUAJIT="$luajit"
LUAJIT_HOST="$luajit"
LUAJIT_LUAROCKS="$luajit_luarocks"
LUAJIT_TREE=""

LUACHECK="$luacheck"
BUSTED="$busted"
LDOC="$ldoc"
APIDOC="$apidoc"
CHECKBASHISMS="$checkbashisms"

# Dummy data:
INSTALL_BIN_DIR="install/bin"
INSTALL_LIB_DIR="install/lib/live-share-server"
INSTALL_DATA_DIR="install/share/live-share-server"
EOF
